{"version":3,"sources":["app/app.js","app/components/admin/admin.js","app/components/admin/datasource.js","app/components/admin/datasources.js","app/components/coordspicker/coordspicker.js","app/components/indicators/indicators.js","app/services/analytics.js","app/services/chart_factory.js","app/services/indicators.js","app/services/messages.js","app/services/rest/indicators.js","app/services/seriefn.js","app/services/utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxtvzlIA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzDA;AAAA","file":"private\\app.js","sourcesContent":["\"use strict\";\r\n\r\nangular.module('geodash', [\r\n  'ngResource',\r\n  'ngNewRouter',\r\n  'angular-chosen',\r\n  'flash',\r\n  'pascalprecht.translate',\r\n  'ui.ace',\r\n  'ngeo'\r\n]).controller(\r\n  'AppController', [ '$router', AppController ]\r\n).config(['$componentLoaderProvider', function ($componentLoaderProvider) {\r\n  $componentLoaderProvider.setTemplateMapping(function (name) {\r\n    return 'components/' + name + '/' + name + '.tpl.html';\r\n  });\r\n}]).config(['$translateProvider', function ($translateProvider) {\r\n\r\n  $translateProvider\r\n    .preferredLanguage('en')\r\n    .useSanitizeValueStrategy('escape')\r\n    .useStaticFilesLoader({\r\n      prefix: 'lang/',\r\n      suffix: '.json'\r\n    });\r\n\r\n}]).config(['$resourceProvider', function($resourceProvider) {\r\n  $resourceProvider.defaults.stripTrailingSlashes = false;\r\n}]);\r\n\r\n\r\nrequire('./components/admin/admin');\r\nrequire('./components/admin/admin.tpl');\r\nrequire('./components/admin/datasource');\r\nrequire('./components/admin/datasource.tpl');\r\nrequire('./components/admin/datasources');\r\nrequire('./components/admin/datasources.tpl');\r\nrequire('./components/coordspicker/coordspicker');\r\nrequire('./components/coordspicker/coordspicker.tpl');\r\nrequire('./components/indicators/indicators');\r\nrequire('./components/indicators/indicators.tpl');\r\nrequire('./services/analytics');\r\nrequire('./services/messages');\r\nrequire('./services/chart_factory');\r\nrequire('./services/utils');\r\nrequire('./services/rest/indicators');\r\nrequire('./services/indicators');\r\nrequire('./services/seriefn');\r\n\r\nfunction AppController($router) {\r\n  $router.config([\r\n    { path: '/'                 , component: 'admin' },\r\n    { path: '/admin'             , component: 'admin' },\r\n  ]);\r\n}\r\n\r\n","var chartConfig = {\r\n  title: {\r\n    text: 'Average Rain fall'\r\n  },\r\n  xAxis: {\r\n    type: 'datetime'\r\n  },\r\n  yAxis: {\r\n    title: {\r\n      text: 'Rainfall',\r\n      style: {\r\n        color: Highcharts.getOptions().colors[0]\r\n      }\r\n    },\r\n    labels: {\r\n      format: '{value} mm',\r\n      style: {\r\n        color: Highcharts.getOptions().colors[0]\r\n      }\r\n    }\r\n  },\r\n  tooltip: {\r\n    crosshairs: true,\r\n    shared: true,\r\n    valueSuffix: 'mm'\r\n  },\r\n  series: [{\r\n    name: 'Daily rain',\r\n    zIndex: 2,\r\n    type: 'column',\r\n    tooltip: {\r\n      valueSuffix: ' mm'\r\n    }\r\n  }, {\r\n    name: 'Average',\r\n    color: 'green',\r\n    type: 'spline',\r\n    zIndex: 3,\r\n    marker: {\r\n      enabled: false\r\n    }\r\n  }, {\r\n    name: 'Standard variation',\r\n    color: 'grey',\r\n    type: 'areasplinerange',\r\n    lineWidth: 0,\r\n    marker: {\r\n      enabled: false\r\n    },\r\n    fillOpacity: 0.5,\r\n    zIndex: 1\r\n  }, {\r\n    name: 'Variance',\r\n    color: 'grey',\r\n    type: 'areasplinerange',\r\n    lineWidth: 0,\r\n    marker: {\r\n      enabled: false\r\n    },\r\n    fillOpacity: 0.2,\r\n    zIndex: 0\r\n  }]\r\n};\r\n\r\nvar AdminController = function($routeParams, $http, $location, Indicator,\r\n                               Transformer, IndicatorService, ChartFactory) {\r\n\r\n  this.aceOptions = {\r\n    mode: 'json',\r\n    showPrintMargin: false\r\n  };\r\n  this.$http = $http;\r\n  this.Transformer = Transformer;\r\n  this.IndicatorService = IndicatorService;\r\n  this.ChartFactory = ChartFactory;\r\n\r\n  this.indicators = Indicator.getAll(undefined, function() {\r\n    this.indicators.forEach(function(indicator) {\r\n      if (!indicator.config.datasources) {\r\n        indicator.config.datasources = [];\r\n      }\r\n    });\r\n\r\n    if($location.path().indexOf('new') >= 0) {\r\n      this.create = true;\r\n      this.current = {\r\n        name: ''\r\n      };\r\n    }\r\n\r\n  }.bind(this));\r\n};\r\n\r\n\r\nAdminController.prototype.save = function() {\r\n  var form = {\r\n    name: this.current.name,\r\n    id: this.current.id,\r\n    config: JSON.stringify(this.current.config)\r\n  };\r\n\r\n  if(!this.current.id) {\r\n    this.indicators.push(this.current);\r\n  }\r\n\r\n  this.$http({\r\n    url : '../../indicators/save/',\r\n    method: 'POST',\r\n    data: $.param(form),\r\n    headers: {'Content-Type': 'application/x-www-form-urlencoded'}\r\n  }).then(function(response) {\r\n    this.current.id = response.data.id;\r\n  }.bind(this));\r\n};\r\n\r\nAdminController.prototype.delete = function() {\r\n  var form = {\r\n    name: this.current.name,\r\n    id: this.current.id,\r\n    config: JSON.stringify(this.current.config)\r\n  };\r\n\r\n  this.$http({\r\n    url : '../../indicators/delete/' + this.current.id,\r\n    method: 'DELETE'\r\n  });\r\n};\r\n\r\nAdminController.prototype.initNew = function() {\r\n  this.current = {\r\n    name: '',\r\n    description: '',\r\n    config: {\r\n      type: '',\r\n      description: '',\r\n      label: '',\r\n      datasources: []\r\n    }\r\n  };\r\n};\r\n\r\nAdminController.prototype.viewChart = function(selector) {\r\n\r\n  this.IndicatorService.getGraph(this.current.config, -14.326, 13.923).then(\r\n      function(chartConfig) {\r\n        var conf = angular.copy(chartConfig);\r\n        conf.exporting = {\r\n          enabled: false\r\n        };\r\n\r\n        conf.series.forEach(function(serie) {\r\n          if(serie.color && serie.color.linearGradient) {\r\n            var newData = [];\r\n            serie.data.forEach(function(d) {\r\n              if(angular.isArray(d)) {\r\n                var color = serie.color;\r\n                var value = d[0];\r\n                var newStops = [];\r\n                color.stops.forEach(function(stop) {\r\n                  newStops.push([stop[0] == 0 || stop[0] == 1 ? stop[0] :\r\n                      value ? stop[0] / value : 1 || 0, stop[1]]);\r\n                });\r\n                newData.push({\r\n                  y: value,\r\n                  color: {\r\n                    linearGradient: serie.color.linearGradient,\r\n                    stops: newStops\r\n                  }\r\n                });\r\n              }\r\n            });\r\n            serie.data = newData;\r\n          }\r\n        });\r\n        this.ChartFactory.render(selector, conf);\r\n      }.bind(this));\r\n};\r\n\r\n\r\n\r\n\r\nangular.module('geodash')\r\n    .controller('AdminController', [\r\n      '$routeParams', '$http', '$location', 'Indicator', 'Transformer',\r\n      'IndicatorService', 'ChartFactory', AdminController\r\n    ]);\r\n","var module = angular.module('geodash');\r\n\r\nmodule.directive('gdDatasourceForm', function() {\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      datasource: '=gdDatasourceFormConfig'\r\n    },\r\n    controller  : 'GdDatasourceController',\r\n    controllerAs: 'ctrl',\r\n    bindToController: true,\r\n    templateUrl: 'components/admin/datasource.tpl.html',\r\n    require: {\r\n      sourcesCtrl: '^^gdDatasources'\r\n  }\r\n  };\r\n});\r\n\r\nvar GdDatasourceController =\r\n    function($scope, $http, gdUtils, Transformer, IndicatorService,\r\n             ChartFactory, gdSerieFn) {\r\n\r\n      this.$scope = $scope;\r\n      this.$http = $http;\r\n      this.gdUtils = gdUtils;\r\n      this.Transformer = Transformer;\r\n      this.IndicatorService = IndicatorService;\r\n      this.ChartFactory = ChartFactory;\r\n      this.gdSerieFn = gdSerieFn;\r\n\r\n      $scope.$watch(function(){\r\n        return this.datasource;\r\n      }.bind(this), function(n) {\r\n        this.resetForm();\r\n      }.bind(this));\r\n\r\n      $scope.$watchCollection(function(){\r\n        return this.sourcesCtrl.datasource;\r\n      }.bind(this), function(n) {\r\n        this.otherDs = this.getOtherDatasources();\r\n      }.bind(this));\r\n\r\n    };\r\n\r\nGdDatasourceController.prototype.save = function() {\r\n  //this.sourcesCtrl.add(this.datasource);\r\n};\r\n\r\nGdDatasourceController.prototype.isFormInputValid = function(name) {\r\n  var form = angular.element($('section.geodash-admin')).scope().indicatorForm;\r\n  return !form[name].$invalid;\r\n};\r\n\r\nGdDatasourceController.prototype.isValid = function() {\r\n  return this.sourcesCtrl.isValid(this.datasource);\r\n};\r\n\r\nGdDatasourceController.prototype.test = function() {\r\n\r\n  this.IndicatorService.getSerie(\r\n      this.datasource, this.lonlat[0], this.lonlat[1]).then(function(data){\r\n\r\n    if(data.error) {\r\n      this.testError = data.error;\r\n    }\r\n    else {\r\n      this.testData = this.gdUtils.aceStringify(data);\r\n      this.testError = null;\r\n    }\r\n  }.bind(this), function(response) {\r\n    this.testError = response.statusText;\r\n    this.testData = null;\r\n  }.bind(this));\r\n};\r\n\r\nGdDatasourceController.prototype.exportData = function() {\r\n  this.series = this.gdUtils.aceStringify(\r\n      this.Transformer.transform(\r\n          JSON.parse(this.testData),\r\n          JSON.parse(this.datasource.transform)));\r\n};\r\n\r\n/**\r\n * Return a list of all datasources of this indicator, except the current one.\r\n */\r\nGdDatasourceController.prototype.getOtherDatasources = function() {\r\n  var dss = [{name: ''}];\r\n  this.sourcesCtrl.datasources.forEach(function(ds, i) {\r\n    if(ds !== this.datasource) {\r\n      dss.push({idx: i, name: ds.name});\r\n    }\r\n  }.bind(this));\r\n  return dss;\r\n};\r\n\r\nGdDatasourceController.prototype.viewChart = function() {\r\n\r\n  var datas = JSON.parse(this.testData);\r\n  var serie = datas.data;\r\n  var categories = datas.categories;\r\n\r\n  var simpleChart = {\r\n    series: [{\r\n      type: this.serieChart.type,\r\n      name: this.serieChart.name,\r\n      data: serie\r\n    }]\r\n  };\r\n  if(categories) {\r\n    simpleChart.xAxis = {\r\n      categories: categories\r\n    }\r\n  }\r\n  this.ChartFactory.render(\"#testSerieChart\", simpleChart);\r\n};\r\nGdDatasourceController.prototype.showCoordsPicker = function() {\r\n  this.$scope.$broadcast('showMap');\r\n};\r\n\r\nGdDatasourceController.prototype.resetForm = function() {\r\n  this.serieChart = {};\r\n  this.testError = null;\r\n  this.testData = null;\r\n};\r\n\r\nmodule.controller('GdDatasourceController', [\r\n  '$scope', '$http', 'gdUtils', 'Transformer', 'IndicatorService',\r\n  'ChartFactory', 'gdSerieFn',\r\n  GdDatasourceController]\r\n);\r\n\r\n\r\n\r\n\r\n","var module = angular.module('geodash');\r\n\r\n\r\nmodule.directive('gdDatasources', function() {\r\n      return {\r\n        restrict: 'E',\r\n        scope: {\r\n          datasources: '=gdDatasourcesArray'\r\n        },\r\n        controller  : 'GdDatasourcesController',\r\n        controllerAs: 'ctrl',\r\n        bindToController: true,\r\n        templateUrl: 'components/admin/datasources.tpl.html'\r\n      };\r\n    });\r\n\r\nvar GdDatasourcesController = function($scope, $http, gdUtils) {\r\n  this.$scope = $scope;\r\n  this.$http = $http;\r\n  this.gdUtils = gdUtils;\r\n  this.current = null;\r\n\r\n  this.aceOptions = {\r\n    mode: 'json',\r\n    showPrintMargin: false\r\n  };\r\n\r\n  $scope.$watch(function(){\r\n    return this.datasources;\r\n  }.bind(this), function(n) {\r\n    this.resetForm();\r\n    var chart = $('#chartDemo').highcharts();\r\n    if(chart) chart.destroy();\r\n  }.bind(this));\r\n\r\n};\r\n\r\nGdDatasourcesController.prototype.new = function() {\r\n  this.current = {};\r\n  this.datasources.push(this.current);\r\n};\r\n\r\nGdDatasourcesController.prototype.add = function(ds) {\r\n  this.datasources.push(ds);\r\n  this.current = null;\r\n};\r\n\r\nGdDatasourcesController.prototype.remove = function(ds) {\r\n  var idx = this.datasources.indexOf(ds);\r\n  if(idx >= 0) {\r\n    this.datasources.splice(idx, 1);\r\n  }\r\n};\r\n\r\nGdDatasourcesController.prototype.show = function(ds) {\r\n  this.current = ds;\r\n};\r\n\r\nGdDatasourcesController.prototype.isValid = function(datasource) {\r\n  var ds = datasource || this.current;\r\n  return ds && ds.name && ds.type &&\r\n      ((ds.type == 'filesystem' && ds.path && ds.pattern && ds.amount >= 0) ||\r\n      (ds.type == 'database' && ds.url && ds.sql));\r\n};\r\n\r\nGdDatasourcesController.prototype.showCoordsPicker = function() {\r\n  this.$scope.$broadcast('showMap');\r\n};\r\n\r\nGdDatasourcesController.prototype.resetForm = function() {\r\n  this.current = null;\r\n};\r\n\r\nmodule.controller('GdDatasourcesController', [\r\n  '$scope', '$http', 'gdUtils',\r\n  GdDatasourcesController]);\r\n\r\n\r\n","angular.module('geodash')\r\n    .component('geodashCoordspicker', {\r\n      bindings    : {\r\n        coordinates: '='\r\n      },\r\n      controller  : CoordspickerController,\r\n      controllerAs: 'ctrl',\r\n      templateUrl : 'components/coordspicker/coordspicker.tpl.html'\r\n    });\r\n\r\nfunction CoordspickerController($scope, $timeout, $element,\r\n                                ngeoDecorateInteraction) {\r\n\r\n  this.ngeoDecorateInteraction_ = ngeoDecorateInteraction;\r\n  this.$scope = $scope;\r\n  this.coordinates = [];\r\n\r\n  this.map = new ol.Map({\r\n    layers: [new ol.layer.Tile({\r\n      source: new ol.source.OSM()\r\n    })],\r\n    view: new ol.View({\r\n      center: [0, 0],\r\n      zoom: 2\r\n    })\r\n  });\r\n  this.map.setTarget($element.find('.coordspicker-map')[0]);\r\n\r\n  var style =  new ol.style.Style({\r\n    image: new ol.style.Circle({\r\n      fill: new ol.style.Fill({\r\n        color: 'red'\r\n      }),\r\n      stroke: new ol.style.Stroke({\r\n        color: 'red',\r\n        width: 1.25\r\n      }),\r\n      radius: 6\r\n    })\r\n  });\r\n\r\n  var fo = new ol.layer.Vector({\r\n    source: new ol.source.Vector({\r\n      useSpatialIndex: false\r\n    }),\r\n    style: style,\r\n    updateWhileAnimating: true,\r\n    updateWhileInteracting: true,\r\n    map: this.map\r\n  });\r\n\r\n  this.feature = new ol.Feature();\r\n  fo.getSource().addFeature(this.feature);\r\n  this.featureOverlay = fo;\r\n\r\n  this.drawPoint = new ol.interaction.Draw({\r\n    features: fo.getSource().getFeatures(),\r\n    type: 'Point',\r\n    style: style\r\n  });\r\n\r\n  var drawPoint = this.drawPoint;\r\n  this.ngeoDecorateInteraction_(drawPoint);\r\n  drawPoint.setActive(false);\r\n  this.map.addInteraction(drawPoint);\r\n\r\n  drawPoint.on('drawstart', this.handleDrawStart_.bind(this));\r\n  drawPoint.on('drawend', this.handleDrawEnd_.bind(this));\r\n\r\n  $scope.$on('showMap', function() {\r\n    $timeout(function(){\r\n      this.map.updateSize();\r\n    }.bind(this), 100);\r\n  }.bind(this));\r\n};\r\n\r\nCoordspickerController.prototype.handleFormChange = function() {\r\n  var lon = this.coordinates[0],\r\n      lat = this.coordinates[1];\r\n\r\n  if(lon && lat) {\r\n    this.feature.setGeometry(new ol.geom.Point(ol.proj.transform([lon, lat],\r\n        'EPSG:4326', this.map.getView().getProjection())));\r\n    this.featureOverlay.changed();\r\n  }\r\n};\r\n\r\nCoordspickerController.prototype.handleDrawStart_ = function() {\r\n  this.$scope.$apply(function() {\r\n    this.feature.setGeometry(null);\r\n  }.bind(this));\r\n};\r\n\r\nCoordspickerController.prototype.handleDrawEnd_ = function(event) {\r\n  this.$scope.$apply(function() {\r\n    this.feature = event.feature;\r\n    var coords = this.feature.getGeometry().getCoordinates();\r\n    coords = ol.proj.transform(coords, this.map.getView().getProjection(),\r\n        'EPSG:4326');\r\n    this.coordinates[0] = Number(coords[0].toFixed(3));\r\n    this.coordinates[1] = Number(coords[1].toFixed(3));\r\n    this.featureOverlay.changed();\r\n    this.drawPoint.active = false;\r\n  }.bind(this));\r\n};\r\n\r\nCoordspickerController.$inject = ['$scope','$timeout', '$element',\r\n  'ngeoDecorateInteraction'];\r\n","var module = angular.module('geodash');\r\n\r\nArray.prototype.move = function(from, to) {\r\n  this.splice(to, 0, this.splice(from, 1)[0]);\r\n};\r\n\r\nmodule.component('gdMyboard', {\r\n    bindings: {\r\n    },\r\n    controller: 'MyboardController',\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'components/indicators/indicators.tpl.html'\r\n  });\r\n\r\n/**\r\n *\r\n * @param $timeout\r\n * @param Indicator\r\n * @param ChartFactory\r\n * @param $scope\r\n * @constructor\r\n */\r\nvar MyboardController = function ($scope, $timeout, Indicator, ChartFactory,\r\n                                  appFlash) {\r\n  this.$timeout = $timeout;\r\n  this.ChartFactory = ChartFactory;\r\n  this.$scope = $scope;\r\n  this.appFlash = appFlash;\r\n\r\n  this.indicatorsToAdd = [];\r\n  this.indicatorsIdToAdd = [];\r\n\r\n  this.parseCoordinates();\r\n  if(!this.lon || !this.lat) {\r\n    this.appFlash.create('danger', 'noparam.error');\r\n    return;\r\n  }\r\n\r\n  // get All indicators from server and build dashboard from locaStorage\r\n  this.allIndicators = Indicator.getAll({}, function() {\r\n    var myconfig = localStorage.geodash;\r\n    if(myconfig) {\r\n      myconfig = myconfig.split(',').map(Number);\r\n      this.indicators = new Array(myconfig.length);\r\n      this.allIndicators.forEach(function(indicator) {\r\n        var idx = myconfig.indexOf(indicator.id);\r\n        if(idx >= 0) {\r\n          this.indicators[idx] = indicator;\r\n        }\r\n      }.bind(this));\r\n    }\r\n    else {\r\n      this.indicators = this.allIndicators;\r\n    }\r\n    this.renderGraphs_();\r\n  }.bind(this));\r\n};\r\n\r\n/**\r\n * Switch to config mode allowing to reorder/add/remove panels.\r\n */\r\nMyboardController.prototype.edit = function() {\r\n\r\n  // Need to init the jquery-ui sortable elements once.\r\n  if(this.editing === undefined) {\r\n    $('#sortable').sortable({\r\n      handle: \".panel-heading\",\r\n      update: function( event, ui) {\r\n        var targetId = ui.item[0].id;\r\n        var id = (targetId.substring(6, targetId.length));\r\n        this.synchArrays_(id);\r\n        this.dirty = true;\r\n      }.bind(this)\r\n    });\r\n    this.backup = angular.copy(this.indicators);\r\n    this.editing = true;\r\n  }\r\n  if(this.editing === false) {\r\n    this.backup = angular.copy(this.indicators);\r\n    this.dirty = false;\r\n    this.editing = true;\r\n    $('#sortable').sortable('enable');\r\n  }\r\n};\r\n\r\n/**\r\n * Save the current state of your dashboard.\r\n * It is saved for your session and in localStorage.\r\n */\r\nMyboardController.prototype.saveState = function() {\r\n  this.stopEditing_();\r\n  var output = [];\r\n  this.indicators.forEach(function(indicator) {\r\n    output.push(indicator.id);\r\n  });\r\n  localStorage.geodash = output;\r\n  this.appFlash.create('success', 'board.saved.ok');\r\n};\r\n\r\n/**\r\n * Cancel the changes on your dashboard. Go back to a saved backup and\r\n * exit from edit mode.\r\n */\r\nMyboardController.prototype.cancelState = function() {\r\n  this.stopEditing_();\r\n  if(this.dirty) {\r\n    this.indicators = this.backup;\r\n    this.renderGraphs_();\r\n    this.appFlash.create('success', 'board.cancel.ok');\r\n  }\r\n};\r\n\r\n/**\r\n * Exit from edit mode.\r\n * @private\r\n */\r\nMyboardController.prototype.stopEditing_ = function() {\r\n  $('#sortable').sortable('disable');\r\n  this.editing = false;\r\n};\r\n\r\n/**\r\n * Open an indicator in full page. The chart is reloaded with full height.\r\n * @param indicator The indicator to open\r\n */\r\nMyboardController.prototype.open = function(indicator) {\r\n  if(this.editing) return;\r\n  this.zoom = indicator;\r\n  this.$timeout(function() {\r\n    var selector = '#board_zoom_' + indicator.id + '_chart';\r\n    this.ChartFactory.renderIndicator(\r\n        indicator, selector, this.lon, this.lat, $('.full-view').height() - 100);\r\n  }.bind(this));\r\n};\r\n\r\n/**\r\n * Remove an indicator from list.\r\n * @param indicator The indicator to remove.\r\n */\r\nMyboardController.prototype.remove = function (indicator) {\r\n  this.modal = {\r\n    message: 'delete.confirm',\r\n    ok: function() {\r\n      var idx = this.indicators.indexOf(indicator);\r\n      this.indicators.splice(idx, 1);\r\n      this.dirty = true;\r\n      this.appFlash.create('success', 'indicator.removed', {\r\n        name: indicator.config.label || indicator.name\r\n      });\r\n    }.bind(this)\r\n  };\r\n};\r\n\r\n/**\r\n * Synchronize the jquery ui sortable elements with the angular indicators.\r\n * @param targetId Id of the moved indicator.\r\n * @private\r\n */\r\nMyboardController.prototype.synchArrays_ = function(targetId) {\r\n  var uiIds = [];\r\n  var oldPos, newPos;\r\n\r\n  $(\"#sortable .panel\").each(function(idx, item) {\r\n    var id = parseInt(item.id.substring(6, item.id.length));\r\n    uiIds.push(id);\r\n    if (id == targetId) {\r\n      newPos = idx;\r\n    }\r\n  });\r\n\r\n  this.indicators.some(function(indicator, idx) {\r\n    if(indicator.id == targetId) {\r\n      oldPos = idx;\r\n      return true;\r\n    }\r\n  }.bind(this));\r\n  this.indicators.move(oldPos, newPos);\r\n  this.$scope.$apply();\r\n};\r\n\r\n/**\r\n * Render all highchart charts in their dedicated div.\r\n * @private\r\n */\r\nMyboardController.prototype.renderGraphs_ = function() {\r\n  this.$timeout(function(){\r\n    this.indicators.forEach(function(board) {\r\n\r\n      var selector = '#board_' + board.id + '_chart';\r\n      this.ChartFactory.renderIndicator(board, selector, this.lon, this.lat);\r\n    }.bind(this));\r\n  }.bind(this));\r\n};\r\n\r\n/**\r\n * Add indicators to your selection. The selection means the indicators\r\n * you gonna add to your dashboard.\r\n * @param indicator Indicator to add.\r\n */\r\nMyboardController.prototype.selectToAdd = function(indicator) {\r\n\r\n  var idx = this.indicatorsIdToAdd.indexOf(indicator.id);\r\n  if(idx >= 0) {\r\n    this.indicatorsToAdd.splice(idx, 1);\r\n    this.indicatorsIdToAdd.splice(idx, 1);\r\n  }\r\n  else {\r\n    this.indicatorsToAdd.push(indicator);\r\n    this.indicatorsIdToAdd.push(indicator.id);\r\n  }\r\n};\r\n\r\n/**\r\n * Reset indicators to add selection.\r\n */\r\nMyboardController.prototype.cancelAdd = function() {\r\n  this.indicatorsToAdd = [];\r\n  this.indicatorsIdToAdd = [];\r\n};\r\n\r\nMyboardController.prototype.confirmAdd = function() {\r\n  if(this.indicatorsToAdd.length) {\r\n    this.indicators = this.indicators.concat(this.indicatorsToAdd);\r\n    this.renderGraphs_();\r\n    this.dirty = true;\r\n  }\r\n  this.cancelAdd();\r\n};\r\n\r\nMyboardController.prototype.parseCoordinates = function() {\r\n  var query = location.search.substr(1);\r\n  var p = {};\r\n  query.split(\"&\").forEach(function(part) {\r\n    var item = part.split(\"=\");\r\n    p[item[0]] = decodeURIComponent(item[1]);\r\n  });\r\n  this.lon = parseFloat(p.lon);\r\n  this.lat = parseFloat(p.lat);\r\n};\r\n\r\n\r\nMyboardController.prototype.isAvailable = function(indicator) {\r\n  return !this.indicators.some(function(ind) {\r\n    return indicator.name == ind.name;\r\n  });\r\n};\r\n\r\n/**\r\n * Main controller\r\n * @param $scope\r\n * @constructor\r\n */\r\nvar DashboardController = function ($scope) {\r\n};\r\n\r\n\r\n\r\nmodule.controller('DashboardController', DashboardController);\r\nmodule.controller('MyboardController', MyboardController);\r\n\r\nMyboardController.$inject = ['$scope', '$timeout', 'Indicator', 'ChartFactory', 'appFlash'];\r\nDashboardController.$inject = ['$scope'];\r\n\r\n","angular.module('geodash').service('Maths', [\n  function() {\n\n    /**\n     *\n     * @param {Array<Number>} data\n     */\n    this.average = function(values) {\n      var sum = values.reduce(function(sum, value){\n        return sum + value;\n      }, 0);\n\n      var avg = sum / values.length;\n      return avg;\n    };\n\n    this.standardVariation = function(values) {\n\n      var avg = this.average(values);\n\n      var squareDiffs = values.map(function(value){\n        var diff = value - avg;\n        var sqrDiff = diff * diff;\n        return sqrDiff;\n      });\n\n      var avgSquareDiff = this.average(squareDiffs);\n\n      var stdDev = Math.sqrt(avgSquareDiff);\n      return stdDev;\n    };\n\n  }])\n\n.service('Transformer', [ 'Maths',\n  function(Maths) {\n\n    this.config = {\n      dataType: 'serie',\n      data: {\n        xaxis: 'datereleve',\n        yaxis: ['rain', 'avg', ['e1minus', 'e1plus']/*, ['e2minus', 'e2plus']*/]\n      }\n    };\n\n    this.transform = function(data, config_) {\n      var config = config_ || this.config;\n\n      if(config.dataType = 'serie') {\n        var transformer = new TransformerSerie(data, config, Maths);\n        return transformer.buildSeries();\n      }\n    };\n  }]);\n\nvar TransformerSerie = function(input, config, Maths) {\n  this.config = config;\n  this.input = input;\n  this.Maths = Maths;\n};\n\nTransformerSerie.prototype.extractData = function() {\n  var values = [];\n  this.input.forEach(function(row) {\n    values.push(row[this.config.data.value]);\n  }.bind(this));\n  return values;\n};\n\nTransformerSerie.prototype.buildSeries = function() {\n  var output = [];\n  this.config.data.yaxis.forEach(function() {\n    output.push([]);\n  });\n\n  this.input.data.forEach(function(row, idx) {\n    var dateS = row[this.config.data.xaxis];\n    var date = new Date(dateS);\n    var dateUTC = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n\n    this.config.data.yaxis.forEach(function(yaxis, idx) {\n      if(angular.isArray(yaxis) && yaxis.length == 2) {\n        output[idx].push([dateUTC, Number(row[yaxis[0]].toFixed(1)), Number(row[yaxis[1]].toFixed(1))]);\n      }\n      else {\n        output[idx].push([dateUTC, Number(row[yaxis].toFixed(1))]);\n      }\n    });\n  }.bind(this));\n\n  return {\n    data: output\n  };\n};\n","var module = angular.module('geodash');\r\n\r\n\r\nvar CHART_HEIGHT = 300;\r\n\r\nvar ChartFactory = function($http, $q, appFlash, IndicatorService) {\r\n\r\n  this.getChart = function(type) {\r\n\r\n    var defer = $q.defer();\r\n    var config = chartConfig[type];\r\n    if(!config) {\r\n      console.warn('no config defined for chart: ' + type);\r\n      defer.resolve(chartConfig.default);\r\n      return defer.promise;\r\n    }\r\n\r\n    var url = '../app/data/'+type+ '.json';\r\n    return $http.get(url).then(function(response) {\r\n      if(angular.isArray(response.data)) {\r\n        response.data.forEach(function(serie, idx) {\r\n          config.series[idx].data = serie;\r\n        });\r\n        return config;\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Render the indicator chart.\r\n   *\r\n   * @param indicator The full object representing the DB indicator\r\n   * @param selector The css selector to target the graph\r\n   * @param lon Coordinates\r\n   * @param lat Coordinates\r\n   * @param height Height of the chart, only for zoom mode\r\n   */\r\n  this.renderIndicator = function(indicator, selector, lon, lat, height) {\r\n    var h = height;\r\n    IndicatorService.getGraph(indicator.config, lon, lat).then(\r\n        function(chartConfig) {\r\n          if(!chartConfig) {\r\n            appFlash.create('warning', 'chart.noconfig', {\r\n              name: indicator.config.label || indicator.name\r\n            });\r\n          }\r\n          else {\r\n            // disable export button if not zoom mode\r\n            chartConfig.exporting = {\r\n              enabled: !!h\r\n            };\r\n            // Set height in highchart config object\r\n            var height = h || CHART_HEIGHT;\r\n            chartConfig.chart ? chartConfig.chart.height = height :\r\n                chartConfig.chart = {height:height};\r\n            this.render(selector, chartConfig);\r\n          }\r\n        }.bind(this));\r\n  };\r\n\r\n  /**\r\n   * Render a chart in a specific selector\r\n   *\r\n   * @param selector The css selector to target the graph\r\n   * @param config The full (datas) Highchart config object for the graph\r\n   */\r\n  this.render = function(selector, config) {\r\n    try {\r\n      $(selector).highcharts(config);\r\n    }\r\n    catch (e) {\r\n      appFlash.create('danger', 'chart.render.error');\r\n    }\r\n  };\r\n};\r\n\r\nangular.module('geodash')\r\n    .service('ChartFactory', ['$http', '$q', 'appFlash', 'IndicatorService',\r\n      ChartFactory]);\r\n\r\n\r\nvar chartConfig = {\r\n  averagerain: {\r\n    chart: {\r\n      height: 300\r\n    },\r\n    title: {\r\n      text: 'Average Rain fall'\r\n    },\r\n    xAxis: [{\r\n      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n      crosshair: true\r\n    }],\r\n    yAxis: {\r\n      title: {\r\n        text: 'Rainfall',\r\n        style: {\r\n          color: Highcharts.getOptions().colors[0]\r\n        }\r\n      },\r\n      labels: {\r\n        format: '{value} mm',\r\n        style: {\r\n          color: Highcharts.getOptions().colors[0]\r\n        }\r\n      }\r\n    },\r\n    tooltip: {\r\n      crosshairs: true,\r\n      shared: true,\r\n      valueSuffix: 'mm'\r\n    },\r\n    series: [{\r\n      name: 'Average rain',\r\n      zIndex: 1,\r\n      type: 'column',\r\n      tooltip: {\r\n        valueSuffix: ' mm'\r\n      }\r\n    }, {\r\n      name: 'Standard varation 1',\r\n      type: 'arearange',\r\n      lineWidth: 0,\r\n      linkedTo: ':previous',\r\n      color: Highcharts.getOptions().colors[0],\r\n      fillOpacity: 0.5,\r\n      zIndex: 0\r\n    }, {\r\n      name: 'Standard varation 2',\r\n      type: 'arearange',\r\n      lineWidth: 0,\r\n      linkedTo: ':previous',\r\n      color: 'grey',\r\n      fillOpacity: 0.3,\r\n      zIndex: 0\r\n    }]\r\n  },\r\n  dailyrain: {\r\n    chart: {\r\n      height: 300\r\n    },\r\n    title: {\r\n      text: 'Daily Rain fall'\r\n    },\r\n    plotOptions: {\r\n      series: {\r\n        shadow: false\r\n      }\r\n    },\r\n    xAxis: {\r\n      type: 'datetime'\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: 'Rainfall',\r\n        style: {\r\n          color: Highcharts.getOptions().colors[0]\r\n        }\r\n      },\r\n      labels: {\r\n        format: '{value} mm',\r\n        style: {\r\n          color: Highcharts.getOptions().colors[0]\r\n        }\r\n      },\r\n      plotLines: [{\r\n        color: 'red',\r\n        width: 1,\r\n        value: 10,\r\n        zIndex: 20\r\n      }, {\r\n        color: 'red',\r\n        width: 1,\r\n        value: 20,\r\n        zIndex: 20\r\n      }]\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      valueSuffix: 'mm'\r\n    },\r\n    series: [{\r\n      name: 'Daily rain',\r\n      zIndex: 0,\r\n      type: 'column',\r\n      tooltip: {\r\n        valueSuffix: ' mm'\r\n      }\r\n    }, {\r\n      name: 'High value',\r\n      color: 'green',\r\n      type: 'spline',\r\n      zIndex: 1,\r\n      marker: {\r\n        enabled: false\r\n      }\r\n    }, {\r\n      name: 'High value',\r\n      color: 'green',\r\n      marker: {\r\n        enabled: false\r\n      },\r\n      dashStyle: 'longdash',\r\n      zIndex: 1\r\n    }]\r\n  },\r\n  default: {\r\n    chart: {\r\n      type: 'bar',\r\n      height: 300,\r\n    },\r\n    title: {\r\n      text: 'default'\r\n    },\r\n    xAxis: {\r\n      categories: ['Apples', 'Bananas', 'Oranges']\r\n    },\r\n    yAxis: {\r\n      title: {\r\n        text: 'Fruit eaten'\r\n      }\r\n    },\r\n    series: [{\r\n      name: 'Jane',\r\n      data: [1, 0, 4]\r\n    }, {\r\n      name: 'John',\r\n      data: [5, 7, 3]\r\n    }]\r\n  }\r\n};\r\n\r\n","var module = angular.module('geodash');\r\n\r\nvar Indicator = function($http, $q, Transformer, gdUtils, appFlash, gdSerieFn) {\r\n  this.$http = $http;\r\n  this.$q = $q;\r\n  this.Transformer = Transformer;\r\n  this.gdUtils = gdUtils;\r\n  this.appFlash = appFlash;\r\n  this.gdSerieFn = gdSerieFn;\r\n};\r\n\r\n\r\nIndicator.prototype.getGraph = function(config, lon, lat) {\r\n\r\n  var promises = [];\r\n  config.datasources.forEach(function(ds) {\r\n    promises.push(this.getSerie(ds, lon, lat));\r\n  }.bind(this));\r\n\r\n  return this.$q.all(promises).then(function(datasources) {\r\n    try {\r\n      var chartConfig = this.gdUtils.aceParse(config.chartConfig);\r\n    }\r\n    catch (e) {\r\n      this.appFlash.create('danger', 'chart.json.parse');\r\n      return;\r\n    }\r\n\r\n    var nextIdx = -1;\r\n    var mainSerieCount = 0;\r\n\r\n    try {\r\n      datasources.forEach(function (ds, idx) {\r\n\r\n        var data = ds.data;\r\n        var categories = ds.categories;\r\n\r\n        if(idx === 0) {\r\n          mainSerieCount = data.length;\r\n        }\r\n\r\n        // Multiple series\r\n        if (angular.isArray(data[0][0])) {\r\n          data.forEach(function (serie, i) {\r\n            chartConfig.series[++nextIdx].data = serie;\r\n          });\r\n        }\r\n        else { // single serie\r\n          var c = config.datasources[idx];\r\n\r\n          // Merge with previous serie\r\n          if (c.merge && idx) {\r\n            var previous = chartConfig.series[nextIdx].data;\r\n            if (!c.mergeType || c.mergeType == 'concat') {\r\n              chartConfig.series[nextIdx].data = previous.map(function (value, i) {\r\n                return value.concat(data[i]);\r\n              });\r\n            }\r\n            else if (c.mergeType == 'percentage') {\r\n              chartConfig.series[nextIdx].data = previous.map(function (value, i) {\r\n                return [parseFloat(((value[0] * 100) / data[i][0]).toFixed(2))];\r\n              });\r\n            }\r\n          }\r\n          else if(angular.isDefined(c.basedOnDs) ){\r\n            var bs = chartConfig.series[c.basedOnDs].data;\r\n            chartConfig.series[++nextIdx].data = bs.map(function(v, i, a) {\r\n              return this.gdSerieFn[c.basedOnDsFn](data, v,i,a);\r\n            }.bind(this));\r\n          }\r\n          else {\r\n            chartConfig.series[++nextIdx].data = data;\r\n          }\r\n          if(c.amount === 1) {\r\n            for(var i=1;i<mainSerieCount;i++) {\r\n              chartConfig.series[nextIdx].data[i] = chartConfig.series[nextIdx].data[0];\r\n            }\r\n          }\r\n        }\r\n\r\n        // Add categories if found in datasource\r\n        if (categories) {\r\n          if (!chartConfig.xAxis) {\r\n            chartConfig.xAxis = {\r\n              categories: categories\r\n            }\r\n          }\r\n          else {\r\n            if (!chartConfig.xAxis.categories) {\r\n              chartConfig.xAxis.categories = categories;\r\n            }\r\n          }\r\n        }\r\n      }.bind(this));\r\n\r\n    }\r\n    catch(e) {\r\n      this.appFlash.create('danger', 'chart.serie.error',  {\r\n        name: config.label\r\n      });\r\n    }\r\n    return chartConfig;\r\n  }.bind(this));\r\n};\r\n\r\nIndicator.prototype.getSerie = function(datasource, lon, lat) {\r\n  return this.$http({\r\n    url : '../../geodata/serie/' + lon + '/' + lat + '/',\r\n    method: 'POST',\r\n    data: $.param({\r\n      config: JSON.stringify(datasource)\r\n    }),\r\n    headers: {\r\n      'Content-Type': 'application/x-www-form-urlencoded'\r\n    }\r\n  }).then(function(response) {\r\n    var serie = response.data;\r\n    if(datasource.transform) {\r\n      serie = this.Transformer.transform(serie,\r\n          JSON.parse(datasource.transform));\r\n    }\r\n    return serie;\r\n  }.bind(this));\r\n};\r\n\r\nangular.module('geodash')\r\n    .service('IndicatorService', ['$http', '$q', 'Transformer', 'gdUtils',\r\n      'appFlash', 'gdSerieFn',\r\n      Indicator]);\r\n\r\n","angular.module('geodash').service('appFlash',\n  ['Flash', '$translate', function(Flash, $translate) {\n\n    this.create = function(type, text, replacements, addClass ) {\n      $translate(text, replacements).then(function(translation) {\n        return Flash.create(type, translation, addClass);\n      }, function() {\n        return Flash.create(type, text, addClass);\n      });\n    };\n  }]);\n","angular.module('geodash').factory('Indicator',\r\n  ['$resource', function($resource) {\r\n\r\n    var url = '../app/data/:id/indicators.json';\r\n    return $resource(url, { id: '@uid' }, {\r\n      query: {\r\n        cache   : false,\r\n        method  : 'GET',\r\n        isArray : true\r\n      },\r\n      getAll: {\r\n        url: '../../indicators/',\r\n        cache: false,\r\n        isArray:true\r\n      },\r\n      update: {\r\n        method: 'PUT'\r\n      }\r\n    });\r\n  }]\r\n);\r\n","var module = angular.module('geodash');\r\n\r\nangular.module('geodash')\r\n    .value('gdSerieFn', {\r\n      std1: function(data, value, i) {\r\n        if(value.length == 2) {\r\n          var ET = data.length == 1 ? data[0][1] : data[i][1];\r\n          return [value[0], Math.max(0, value[1] - ET), value[1] + ET];\r\n        }\r\n        else {\r\n          // single value serie, use it to build all output\r\n          var ET = data.length == 1 ? data[0][0] : data[i][0];\r\n          return [Math.max(0, value[0] - ET), value[0] + ET];\r\n        }\r\n      },\r\n      std2: function(data, value, i) {\r\n        if(value.length == 2) {\r\n          var ET = data.length == 1 ? data[0][1] : data[i][1];\r\n          ET = 2 * ET;\r\n          return [value[0], Math.max(0, value[1] - ET), value[1] + ET];\r\n        }\r\n        else {\r\n          // single value serie, use it to build all output\r\n          var ET = data.length == 1 ? data[0][0] : data[i][0];\r\n          ET = 2 * ET;\r\n          return [Math.max(0, value[0] - ET), value[0] + ET];\r\n        }\r\n      }\r\n    });\r\n","var module = angular.module('geodash');\r\nangular.module('geodash')\r\n    .service('gdUtils', [function() {\r\n\r\n      var MONTH_SHORT_FR = ['jan', 'fev', 'mar', 'avr', 'mai', 'juin', 'juil', 'aou', 'sep', 'oct', 'nov', 'dec'];\r\n      var getDay = function() {\r\n        var now = new Date();\r\n        var start = new Date(now.getFullYear(), 0, 0);\r\n        var diff = now - start;\r\n        var oneDay = 1000 * 60 * 60 * 24;\r\n        var day = Math.floor(diff / oneDay);\r\n        return day;\r\n      };\r\n\r\n      var monthInYearAxisLabelFormatter = function() {\r\n        var value = this.value;\r\n        // \"01\" is Janv\r\n        if(angular.isString(value)) {\r\n          value = parseInt(value) -1;\r\n        }\r\n        // value is the number of the day in the year\r\n        else {\r\n          value = Math.round(value / 30.41);\r\n        }\r\n        return MONTH_SHORT_FR[value];\r\n      };\r\n\r\n      var periodFormatter = function() {\r\n        return '<b>Début</b>: ' + this.point.low + '<sub>ème</sub> jours<br>' +\r\n        '<b>Durée</b>: ' + (this.point.high - this.point.low) + ' jours';\r\n      };\r\n\r\n      var monthInYearAxisLabelPositioner = function() {\r\n        var months = [0,1,2,3,4,5,6,7,8,9,10,11,12];\r\n        return months.map(function(v) {\r\n          return v*30.41;\r\n        });\r\n      };\r\n\r\n      this.aceStringify = function(obj) {\r\n        return JSON.stringify(obj, null, 4);\r\n      };\r\n\r\n      this.aceParse = function(string) {\r\n        return JSON.parse(string, function(k, v) {\r\n          if(angular.isString(v) && v.indexOf('$eval:') === 0) {\r\n            var expr = v.substring(6, v.length);\r\n            return eval(expr);\r\n          }\r\n          return v;\r\n        });\r\n      };\r\n\r\n    }]);\r\n\r\n\r\n\r\n"]}